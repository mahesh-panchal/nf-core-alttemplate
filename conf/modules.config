/*
========================================================================================
    Config file for defining DSL2 per module options
========================================================================================
    Available keys to override module options:
        args            = Additional arguments appended to command in module.
        args2           = Second set of arguments appended to command in module (multi-tool modules).
        args3           = Third set of arguments appended to command in module (multi-tool modules).
        publish_dir     = Directory to publish results.
        publish_by_meta = Groovy list of keys available in meta map to append as directories to "publish_dir" path
                            If publish_by_meta = true                 - Value of ${meta['id']} is appended as a directory to "publish_dir" path
                            If publish_by_meta = ['id', 'custompath'] - If "id" is in meta map and "custompath" isn't then "${meta['id']}/custompath/"
                                                                        is appended as a directory to "publish_dir" path
                            If publish_by_meta = false / null         - No directories are appended to "publish_dir" path
        publish_files   = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
                            The value of "directory" is appended to the standard "publish_dir" path as defined above.
                            If publish_files = null (unspecified)     - All files are published.
                            If publish_files = false                  - No files are published.
        suffix          = File name suffix for output files.
----------------------------------------------------------------------------------------
*/

/*
Replacements:
args*            === ext.args* (would be more readable imo if we could do <tool>_args and make sure it's intialised in the module code like suffix)
publish_dir      === override path: or saveAs: as necessary
publish_by_meta  === just include into the path: or saveAs: as necessary. Need to ensure wrapped in a Closure
publish_files    === Use pattern: and saveAs: to include/exclude files.
suffix           === ext.suffix
anything else    === ext.something
*/

/* Pros:
 - Configuration is now in one place (instead of at least 3 - modules.config, addParams, subworkflow script)
 - Standard NF syntax
 - One functions.nf - Probably need to move this to package with modules
 */

process {

    publishDir = [
        [
            path: { "${params.outdir}/${getSoftwareName(task.process)}" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.endsWith('.version.txt') ? null : filename }
        ],
        [
            path: { "${params.outdir}/${getSoftwareName(task.process)}" },
            mode: params.publish_mode,
            pattern: '*.version.txt',
            enabled: false
        ]
    ]
    withName: 'FASTQC' {
        ext.args = '--quiet'
        /*publishDir = [  // This is more verbose, but it's all in one place.
            [
                path: { "${params.outdir}/${getSoftwareName(task.process)}/${meta.id}" },
                mode: params.publish_mode,
                pattern: '*.html'
            ],
            [
                path: { "${params.outdir}/${getSoftwareName(task.process)}/${meta.id}/zips" },
                mode: params.publish_mode,
                pattern: '*.zip'
            ]
        ]*/
    }
    withName: 'MULTIQC' {
        ext.args = params.multiqc_title? "--title \"$params.multiqc_title\"": ''
    }
    withName: 'SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_mode
        ]
    }
    withName: 'GET_SOFTWARE_VERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_mode,
            pattern: '*.tsv'
        ]
    }

}
